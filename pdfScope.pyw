#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Sun Jun 03 21:08:57 2012
# PDFScope, created by Frank J Bruzzaniti (http://code.google.com/p/pdfscope/)


import wx, os, subprocess, wx.lib.dialogs

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):

        # Init var that points to PDF path
        self.pdf_path = ''

        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_PDFiD = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_PDFiD = wx.TextCtrl(self.notebook_1_PDFiD, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_Page = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_Page = wx.TextCtrl(self.notebook_1_Page, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_Encrypt = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_Encrypt = wx.TextCtrl(self.notebook_1_Encrypt, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_ObjStm = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_ObjStm = wx.TextCtrl(self.notebook_1_ObjStm, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_JS = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_JS = wx.TextCtrl(self.notebook_1_JS, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_JavaScript = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_JavaScript = wx.TextCtrl(self.notebook_1_JavaScript, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_AA = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_AA = wx.TextCtrl(self.notebook_1_AA, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_OpenAction = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_OpenAction = wx.TextCtrl(self.notebook_1_OpenAction, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_AcroForm = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_AcroForm = wx.TextCtrl(self.notebook_1_AcroForm, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_JBIG2Decode = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_JBIG2Decode = wx.TextCtrl(self.notebook_1_JBIG2Decode, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_RichMedia = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_RichMedia = wx.TextCtrl(self.notebook_1_RichMedia, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_Launch = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_Launch = wx.TextCtrl(self.notebook_1_Launch, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        self.notebook_1_EmbeddedFile = wx.Panel(self.notebook_1, -1)
        self.text_ctrl_EmbeddedFile = wx.TextCtrl(self.notebook_1_EmbeddedFile, -1, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.HSCROLL)
        
        # Menu Bar
        self.Frame_Main_Menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.fileItem = wx.MenuItem(wxglade_tmp_menu, wx.ID_OPEN, "Open", "Open PDF", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.fileItem)
        self.quitItem = wx.MenuItem(wxglade_tmp_menu, wx.ID_EXIT, "Quit", "Quit application", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.quitItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "File")

        wxglade_tmp_menu = wx.Menu()
        self.viewItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "View [pdf-parser -fwo]", "View an object", wx.ITEM_NORMAL)
        self.refItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Reference [pdf-parser -r]", "View objects referencing an object", wx.ITEM_NORMAL)
        self.saveItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Save [pdf-parser -fwo <obj> > file]", "Save object stream to disk", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.viewItem)
        wxglade_tmp_menu.AppendItem(self.refItem)
        wxglade_tmp_menu.AppendItem(self.saveItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "Object")

        wxglade_tmp_menu = wx.Menu()
        self.extractItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Extract File [pdfid -x]", "Extract file from PDF", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.extractItem)
        self.disarmItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Disarm [pdfid -d]", "View an object", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.disarmItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "PDF")

        wxglade_tmp_menu = wx.Menu()
        self.pdfItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Filtered Text", "View Filtered Text", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.pdfItem)
        self.hexItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Hexadecimal", "View PDF as Hex", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.hexItem)
        self.stringsItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Extracted Strings", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.stringsItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "View")

        self.SetMenuBar(self.Frame_Main_Menubar)
        # Menu Bar end
        
        # Menu events
        self.Bind(wx.EVT_MENU, self.OnQuit,id=wx.ID_EXIT)  #File..Quit 
        self.Bind(wx.EVT_MENU, self.OnOpen,id=wx.ID_OPEN)  #File..Open
        
        self.Bind(wx.EVT_MENU, self.objDialog,self.viewItem) #Object..View
        self.Bind(wx.EVT_MENU, self.refDialog,self.refItem) #Object..Reference
        self.Bind(wx.EVT_MENU, self.saveDialog,self.saveItem) #Object..SavesaveItem

        self.Bind(wx.EVT_MENU, self.extractDialog,self.extractItem) #PDF .. Extract file
        self.Bind(wx.EVT_MENU, self.disarmRef,self.disarmItem) #PDF..Disarm


        self.Bind(wx.EVT_MENU, self.viewFiltered,self.pdfItem) #View..Filtered
        self.Bind(wx.EVT_MENU, self.viewHex,self.hexItem) #View..Hex
        self.Bind(wx.EVT_MENU, self.viewStrings,self.stringsItem) #View..Strings
        # end Menu events

        self.__set_properties()
        self.__do_layout()
        
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("PDFScope v0.6.4 by Frank J Bruzzaniti (frank.bruzzaniti@gmail.com)")
        self.SetSize((1200, 600))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        Sizer_Main = wx.BoxSizer(wx.VERTICAL)
        sizer_1_EmbeddedFile = wx.BoxSizer(wx.VERTICAL)
        sizer_1_Launch = wx.BoxSizer(wx.VERTICAL)
        sizer_1_RichMedia = wx.BoxSizer(wx.VERTICAL)
        sizer_1_JBIG2Decode = wx.BoxSizer(wx.VERTICAL)
        sizer_1_AcroForm = wx.BoxSizer(wx.VERTICAL)
        sizer_1_OpenAction = wx.BoxSizer(wx.VERTICAL)
        sizer_1_AA = wx.BoxSizer(wx.VERTICAL)
        sizer_1_JavaScript = wx.BoxSizer(wx.VERTICAL)
        sizer_1_JS = wx.BoxSizer(wx.VERTICAL)
        sizer_1_ObjStm = wx.BoxSizer(wx.VERTICAL)
        sizer_1_Encrypt = wx.BoxSizer(wx.VERTICAL)
        sizer_1_Page = wx.BoxSizer(wx.VERTICAL)
        sizer_1_PDFiD = wx.BoxSizer(wx.VERTICAL)
        sizer_1_PDFiD.Add(self.text_ctrl_PDFiD, 1, wx.EXPAND, 0)
        self.notebook_1_PDFiD.SetSizer(sizer_1_PDFiD)
        sizer_1_Page.Add(self.text_ctrl_Page, 1, wx.EXPAND, 0)
        self.notebook_1_Page.SetSizer(sizer_1_Page)
        sizer_1_Encrypt.Add(self.text_ctrl_Encrypt, 1, wx.EXPAND, 0)
        self.notebook_1_Encrypt.SetSizer(sizer_1_Encrypt)
        sizer_1_ObjStm.Add(self.text_ctrl_ObjStm, 1, wx.EXPAND, 0)
        self.notebook_1_ObjStm.SetSizer(sizer_1_ObjStm)
        sizer_1_JS.Add(self.text_ctrl_JS, 1, wx.EXPAND, 0)
        self.notebook_1_JS.SetSizer(sizer_1_JS)
        sizer_1_JavaScript.Add(self.text_ctrl_JavaScript, 1, wx.EXPAND, 0)
        self.notebook_1_JavaScript.SetSizer(sizer_1_JavaScript)
        sizer_1_AA.Add(self.text_ctrl_AA, 1, wx.EXPAND, 0)
        self.notebook_1_AA.SetSizer(sizer_1_AA)
        sizer_1_OpenAction.Add(self.text_ctrl_OpenAction, 1, wx.EXPAND, 0)
        self.notebook_1_OpenAction.SetSizer(sizer_1_OpenAction)
        sizer_1_AcroForm.Add(self.text_ctrl_AcroForm, 1, wx.EXPAND, 0)
        self.notebook_1_AcroForm.SetSizer(sizer_1_AcroForm)
        sizer_1_JBIG2Decode.Add(self.text_ctrl_JBIG2Decode, 1, wx.EXPAND, 0)
        self.notebook_1_JBIG2Decode.SetSizer(sizer_1_JBIG2Decode)
        sizer_1_RichMedia.Add(self.text_ctrl_RichMedia, 1, wx.EXPAND, 0)
        self.notebook_1_RichMedia.SetSizer(sizer_1_RichMedia)
        sizer_1_Launch.Add(self.text_ctrl_Launch, 1, wx.EXPAND, 0)
        self.notebook_1_Launch.SetSizer(sizer_1_Launch)
        sizer_1_EmbeddedFile.Add(self.text_ctrl_EmbeddedFile, 1, wx.EXPAND, 0)
        self.notebook_1_EmbeddedFile.SetSizer(sizer_1_EmbeddedFile)
        self.notebook_1.AddPage(self.notebook_1_PDFiD, "PDFiD")
        self.notebook_1.AddPage(self.notebook_1_Page, "/Page")
        self.notebook_1.AddPage(self.notebook_1_Encrypt, "/Encrypt")
        self.notebook_1.AddPage(self.notebook_1_ObjStm, "/ObjStm")
        self.notebook_1.AddPage(self.notebook_1_JS, "/JS")
        self.notebook_1.AddPage(self.notebook_1_JavaScript, "/JavaScript")
        self.notebook_1.AddPage(self.notebook_1_AA, "/AA")
        self.notebook_1.AddPage(self.notebook_1_OpenAction, "/OpenAction")
        self.notebook_1.AddPage(self.notebook_1_AcroForm, "/AcroForm")
        self.notebook_1.AddPage(self.notebook_1_JBIG2Decode, "/JBIG2Decode")
        self.notebook_1.AddPage(self.notebook_1_RichMedia, "/RichMedia")
        self.notebook_1.AddPage(self.notebook_1_Launch, "/Launch")
        self.notebook_1.AddPage(self.notebook_1_EmbeddedFile, "/EmbeddedFile")
        Sizer_Main.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(Sizer_Main)
        self.Layout()
        # end wxGlade

    def OnQuit(self, e):
        self.Close()

    def popupDialog(self, msgtxt, title):
        dlg = wx.lib.dialogs.ScrolledMessageDialog(self, msgtxt, title)
        dlg.ShowModal()

    # Ask user for obj number to view    
    def objDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Enter the number of the object, returns filtered object')
        if dlg.ShowModal() == wx.ID_OK:
            print self.viewObject(dlg.GetValue())
            dlg.Destroy()

    # Ask user for obj number to view    
    def refDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Enter target object number, returns objects refrencing target')
        if dlg.ShowModal() == wx.ID_OK:
            print self.viewRef(dlg.GetValue())
            dlg.Destroy()

    # Ask user for file to extract    
    def extractDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Save extracted file as ...')
        if dlg.ShowModal() == wx.ID_OK:
            print self.extractRef(dlg.GetValue())
            dlg.Destroy()

    # Ask user for obj number to view    
    def saveDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Enter object number (object to save)')
        if dlg.ShowModal() == wx.ID_OK:
            obj_num = dlg.GetValue()
            dlg.Destroy()

        dlg = wx.TextEntryDialog(self, 'Enter filename, saves object to file')
        dlg.SetValue(os.path.basename(self.pdf_path) + '-obj' + obj_num + '.txt')
        if dlg.ShowModal() == wx.ID_OK:
            file_name = dlg.GetValue()
            dlg.Destroy()
        
        self.saveRef(obj_num,file_name)
    
    # On open of file, run scripts and display results
    def OnOpen(self, e):
        self.text_ctrl_PDFiD.SetValue('Please wait whilst I parse your PDF ... this could take a minute')  
       
        fileType = "PDF File (.pdf)|*.pdf"
        dialog = wx.FileDialog(None,'Choose a file',os.getcwd(),"", fileType,wx.OPEN)
        if dialog.ShowModal() == wx.ID_OK:
            self.pdf_path = dialog.GetPath()
            self.PDFiD()
            self.text_ctrl_Page.SetValue(self.pdf_parser('/Page'))
            self.text_ctrl_Encrypt.SetValue(self.pdf_parser('/Encrypt'))
            self.text_ctrl_ObjStm.SetValue(self.pdf_parser('/ObjStm'))
            self.text_ctrl_JS.SetValue(self.pdf_parser('/JS'))
            self.text_ctrl_JavaScript.SetValue(self.pdf_parser('/JavaScript'))
            self.text_ctrl_AA.SetValue(self.pdf_parser('/AA'))
            self.text_ctrl_OpenAction.SetValue(self.pdf_parser('/OpenAction'))
            self.text_ctrl_AcroForm.SetValue(self.pdf_parser('/AcroForm'))
            self.text_ctrl_JBIG2Decode.SetValue(self.pdf_parser('/JBIG2Decode'))
            self.text_ctrl_RichMedia.SetValue(self.pdf_parser('/RichMedia'))
            self.text_ctrl_Launch.SetValue(self.pdf_parser('/Launch'))
            self.text_ctrl_EmbeddedFile.SetValue(self.pdf_parser('/EmbeddedFile'))
            
        dialog.Destroy()
        
    # runs PDFiD.py and checksums.py
    def PDFiD(self):
        pr1 = subprocess.Popen('pdfid.py -f ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        pr2 = subprocess.Popen('checksums.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr1.stdout.readlines():
            lst_results.append(line)
        for line in pr2.stdout.readlines():
            lst_results.append(line)
        self.text_ctrl_PDFiD.SetValue(''.join(lst_results))

    # Runs pdf-parser.py with search argument and returns console output
    def pdf_parser(self, query):
        pr = subprocess.Popen('pdf-parser.py --search ' + query + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        return ''.join(lst_results)

    # Runs pdf-parser extracting object with pdf-parser -f --raw -o
    def viewObject(self, obj_num):
        pr = subprocess.Popen('pdf-parser.py -f --raw -o ' + obj_num + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Object ' + obj_num)

    def viewRef(self, obj_num):
        pr = subprocess.Popen('pdf-parser.py -f --raw -r ' + obj_num + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Objects Referencing Object ' + obj_num)

    def saveRef(self, obj_num, file_name):
        pr = subprocess.Popen('pdf-parser.py -fwo ' + obj_num + ' > ' + file_name + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.popupDialog('Object ' + obj_num + ' saved as ' + file_name, 'Save Object')

    def extractRef(self, file_name):
        pr = subprocess.Popen('pdf-parser.py -x ' + file_name + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.popupDialog('Extracted file saved as ' + os.getcwd() + '\\' + file_name, 'Extract File')

    def disarmRef(self, e):
        pr = subprocess.Popen('pdfid.py -d ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.popupDialog('Disarmed PDF saved as ' + os.path.splitext(self.pdf_path)[0] + '.disarmed.pdf', self.pdf_path + ' Disarmed')

    # Runs pdf-parser extracting filtered text with pdf-parser -f --raw
    def viewFiltered(self, e):
        pr = subprocess.Popen('pdf-parser.py -f --raw ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Filtered Text')

    # Runs hexdump.py displaying pdf in hex
    def viewHex(self, e):
        pr = subprocess.Popen('hexdump.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Hex View')

    # Runs stringdump.py displaying extracted strings
    def viewStrings(self, e):
        pr = subprocess.Popen('stringdump.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Extracted Strings')

# end of class MyFrame
if __name__ == "__main__":
    pdfScope = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    Frame_Main = MyFrame(None, -1, "")
    pdfScope.SetTopWindow(Frame_Main)
    Frame_Main.Show()
    pdfScope.MainLoop()
