#TODO:
#Add checksums
#Add right-click
#Add debug console
#Add yaya processing
#Disable menu items before file is opened

#BUG: scroll bar dosen;t always update till you move it with mouse
#BUG: D:\Users-old\Frankie\Documents\Src\pdfScope>pdf-parser.py -f --raw -s Page  test.pdf returns results including /Pages
#Bug: add free/advanced search

#!/usr/bin/env python
# -*- coding: ISO-8859-15 -*-
#
# generated by wxGlade 0.6.7 (standalone edition) on Sat Aug 03 13:59:51 2013
#

import wx, os, subprocess, wx.lib.dialogs
from wx.lib.delayedresult import startWorker


# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
              
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.frame_1_menubar.Append(wxglade_tmp_menu, _("File"))
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end

 
        # Menu Bar
        self.Frame_Main_Menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.fileItem = wx.MenuItem(wxglade_tmp_menu, wx.ID_OPEN, "Open", "Open PDF", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.fileItem)
        self.quitItem = wx.MenuItem(wxglade_tmp_menu, wx.ID_EXIT, "Quit", "Quit application", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.quitItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "File")

        wxglade_tmp_menu = wx.Menu()
        self.viewItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "View (filtered) [pdf-parser -fwo]", "View an object", wx.ITEM_NORMAL)
        #self.refItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Reference [pdf-parser -r]", "View objects referencing an object", wx.ITEM_NORMAL)
        self.saveItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Save [pdf-parser -fwo <obj> > file]", "Save object stream to disk", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.viewItem)
        #wxglade_tmp_menu.AppendItem(self.refItem)
        wxglade_tmp_menu.AppendItem(self.saveItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "Object")

        wxglade_tmp_menu = wx.Menu()
        self.extractItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Extract File [pdfid -x]", "Extract file from PDF", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.extractItem)
        self.stringsItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Extract Strings (unfiltered)", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.stringsItem)
        self.disarmItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Disarm [pdfid -d]", "View an object", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.disarmItem)
        self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "PDF")

        wxglade_tmp_menu = wx.Menu()
        #self.pdfItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Filtered Text", "View Filtered Text", wx.ITEM_NORMAL)
        #wxglade_tmp_menu.AppendItem(self.pdfItem)
        #self.hexItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Hexadecimal", "View PDF as Hex", wx.ITEM_NORMAL)
        #wxglade_tmp_menu.AppendItem(self.hexItem)
        #self.stringsItem = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Extracted Strings", "", wx.ITEM_NORMAL)
        #wxglade_tmp_menu.AppendItem(self.stringsItem)
        #self.Frame_Main_Menubar.Append(wxglade_tmp_menu, "View")

        self.SetMenuBar(self.Frame_Main_Menubar)
        # Menu Bar end

        # Menu events
        self.Bind(wx.EVT_MENU, self.OnQuit,id=wx.ID_EXIT)  #File..Quit 
        self.Bind(wx.EVT_MENU, self.OnOpen,id=wx.ID_OPEN)  #File..Open
        
        self.Bind(wx.EVT_MENU, self.objDialog,self.viewItem) #Object..View
        #self.Bind(wx.EVT_MENU, self.refDialog,self.refItem) #Object..Reference
        #self.Bind(wx.EVT_MENU, self.saveDialog,self.saveItem) #Object..SavesaveItem

        self.Bind(wx.EVT_MENU, self.extractDialog,self.extractItem) #PDF .. Extract file
        self.Bind(wx.EVT_MENU, self.disarmRef,self.disarmItem) #PDF..Disarm


        #self.Bind(wx.EVT_MENU, self.viewFiltered,self.pdfItem) #View..Filtered
        #self.Bind(wx.EVT_MENU, self.viewHex,self.hexItem) #View..Hex
        self.Bind(wx.EVT_MENU, self.viewStrings,self.stringsItem) #View..Strings
        # end Menu events

                
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.panel_1 = wx.Panel(self.window_1, wx.ID_ANY)
        self.tree_ctrl_1 = wx.TreeCtrl(self.panel_1, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
        self.sizer_2_staticbox = wx.StaticBox(self.panel_1, wx.ID_ANY, _("Objects"))
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)
        #self.text_ctrl_1 = wx.TextCtrl(self.window_1_pane_2, wx.ID_ANY, "")
        self.text_ctrl_1 = wx.TextCtrl(self.window_1_pane_2, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.sizer_5_staticbox = wx.StaticBox(self.window_1_pane_2, wx.ID_ANY, _("Data"))
        self.gauge_1 = wx.Gauge(self, wx.ID_ANY, 100, style=wx.GA_HORIZONTAL | wx.GA_SMOOTH)

        # Right Click Menu Event
        self.Bind(wx.EVT_CONTEXT_MENU, self.RightClickMenu)

        # tree_ctrl_1 events
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.DblClickTree, self.tree_ctrl_1)

        

        # Set help text
        self.text_ctrl_1.SetValue('Click [File] then [Open] and select PDF for analysis')

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

     # On open of file, run scripts and display results
    def OnOpen(self, e):
        
        fileType = "PDF File (.pdf)|*.pdf"
        dialog = wx.FileDialog(None,'Choose a file',os.getcwd(),"", fileType,wx.OPEN)
        if dialog.ShowModal() == wx.ID_OK:
            self.pdf_path = dialog.GetPath() #get path from dialog box

            # Set help text
            self.text_ctrl_1.SetValue('')

            #Update progress bar
            self.gauge_1.SetValue(10)
                    
            #startWorker(self.JobDone, self.PDFiD) #run PDFiD and update progress bar
            self.PDFiD()

            #Update progress bar
            self.gauge_1.SetValue(100)

            #Reset tree for new file
            self.tree_ctrl_1.DeleteAllItems()
            
            # populate treectrl with PDFiD results
            root = self.tree_ctrl_1.AddRoot(os.path.basename(self.pdf_path))
            pdfid_results = []
            index = 9
            pdfid_results = self.PDFiD()
           
            while pdfid_results[index].strip():
                if pdfid_results[index].split()[1] != '>': #Look for > from /Colors > 2^24, spaces messes up delimiting so compensate with the following IF and partialy hardcoded label.
                    self.tree_ctrl_1.AppendItem(root,pdfid_results[index].split()[0] + ' (' + pdfid_results[index].split()[1] + ')')
                else:
                    self.tree_ctrl_1.AppendItem(root,'/Colors > 2^24 (' + pdfid_results[index].split()[3] + ')') #partialy hardcoded label
                index = index + 1

        self.tree_ctrl_1.ExpandAll() #expand tree

        #Add checksums
        lst_results = []
        pr = subprocess.Popen('checksums.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) #run checksum.py and add results to list
           
        for line in pr.stdout.readlines(): 
            lst_results.append(line)

        self.tree_ctrl_1.SetItemPyData(self.tree_ctrl_1.GetRootItem(),''.join(lst_results)) #set node pydata value to output of checksums.py

        for line in self.tree_ctrl_1.GetItemPyData(self.tree_ctrl_1.GetRootItem()): #set text of textctrl to pydata contents of root node (checksums)
                self.text_ctrl_1.AppendText(line)
     


    def RightClickMenu(self,evt):
        print evt
    
    def JobDone(self, result):
        #print('Orc Peon: "Job Done"')
        self.gauge_1.SetValue(100)
        
    def DblClickTree(self,evt):

        #check to see if root node is being clicked, if so output data to textctrl
        if self.tree_ctrl_1.GetItemText(evt.GetItem()) == self.tree_ctrl_1.GetItemText(self.tree_ctrl_1.GetRootItem()):
            self.text_ctrl_1.SetValue(self.tree_ctrl_1.GetItemPyData(evt.GetItem()))

        #Update progress bar
        self.gauge_1.SetValue(10)

        if len(self.tree_ctrl_1.GetItemText(evt.GetItem()).split()) > 1: #fixes a list out of bounds error by checking if the list can accomidate [1]
            if self.tree_ctrl_1.GetItemText(evt.GetItem()).split()[1] == '(0)': #don't parse if there's no objects
                self.text_ctrl_1.SetValue('')
            else:
                #self.text_ctrl_1.SetValue(self.pdf_parser(self.tree_ctrl_1.GetItemText(evt.GetItem()).split()[0])) #set txtctrl text value to output of pdf-parser
                #self.tree_ctrl_1.SetItemPyData(evt.GetItem(),self.text_ctrl_1.GetValue())
                #set txtctrl text value to output of pdf-parser
                self.tree_ctrl_1.SetItemPyData(evt.GetItem(),self.pdf_parser(self.tree_ctrl_1.GetItemText(evt.GetItem()).split()[0])) #set node pydata value to output of pdf-parser
                self.text_ctrl_1.SetValue(self.tree_ctrl_1.GetItemPyData(evt.GetItem())) #set text ctrl value to that of node pydata

                if self.tree_ctrl_1.GetChildrenCount(evt.GetItem()) == 0: #If no obj children nodes exsist
                    for line in self.tree_ctrl_1.GetItemPyData(evt.GetItem()).splitlines():  #find all obj refrences
                        if line.find('obj ') != -1:
                            #print line.find('/Pages') #On windows pdf-parser search for /Page also finds /Pages so let's filter out /Pages here
                            self.tree_ctrl_1.AppendItem(evt.GetItem(),line)  #create child nodes from obj refrences
                    self.tree_ctrl_1.ExpandAllChildren(evt.GetItem())

        if self.tree_ctrl_1.GetItemText(evt.GetItem()).find('obj ') != -1:
            self.tree_ctrl_1.SetItemPyData(evt.GetItem(),self.getObject(self.tree_ctrl_1.GetItemText(evt.GetItem()).split()[1]))

            self.text_ctrl_1.SetValue('')
                        
            for line in self.tree_ctrl_1.GetItemPyData(evt.GetItem()):
                self.text_ctrl_1.AppendText(line)

            #self.text_ctrl_1.SetScrollPos(wx.VERTICAL,0) #BUG: scroll bar dosen;t always update till you move it with mouse
            #self.text_ctrl_1.SetValue(str(self.tree_ctrl_1.GetItemPyData(evt.GetItem())))
            #print self.tree_ctrl_1.GetItemText(evt.GetItem()).split()[1]
            


        #Update progress bar
        self.gauge_1.SetValue(100)

    
    def pdf_parser(self, query):
        pr = subprocess.Popen('pdf-parser.py -f --search ' + query + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        return ''.join(lst_results)

            
        # runs PDFiD.py and checksums.py
    def PDFiD(self):
              
        #pr1 = subprocess.Popen('pdfid.py -f ' + self.pdf_path + ' > ' + self.pdf_path + '.pdfid.txt', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        pr1 = subprocess.Popen('pdfid.py -f ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        #pr2 = subprocess.Popen('checksums.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    
        lst_results = []
        for line in pr1.stdout.readlines():
            lst_results.append(line)
        return lst_results #can prob get rid of using lst_results

    def getObject(self, obj_num): #function that extracts object and returns value
        #print 'pdf-parser.py -f --raw -o ' + obj_num + ' ' + self.pdf_path
        pr = subprocess.Popen('pdf-parser.py -f --raw -o ' + obj_num + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        return lst_results

    def viewObject(self, obj_num):
        pr = subprocess.Popen('pdf-parser.py -f --raw -o ' + obj_num + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Object ' + obj_num + ' (filtered)')

    def OnQuit(self, e):
        self.Close()

    # Ask user for obj and display refs    
    def refDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Enter target object number, returns objects refrencing target')
        if dlg.ShowModal() == wx.ID_OK:
            print self.viewRef(dlg.GetValue())
            dlg.Destroy()

    # Ask user for file to extract    
    def extractDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Save extracted file as ...')
        if dlg.ShowModal() == wx.ID_OK:
            print self.extractRef(dlg.GetValue())
            dlg.Destroy()

    def popupDialog(self, msgtxt, title):
        dlg = wx.lib.dialogs.ScrolledMessageDialog(self, msgtxt, title)
        dlg.ShowModal()

    # extract file
    def extractRef(self, file_name):
        pr = subprocess.Popen('pdf-parser.py -x ' + file_name + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.popupDialog('Extracted file saved as ' + os.getcwd() + '\\' + file_name, 'Extract File')

    # disarm pdf
    def disarmRef(self, e):
        pr = subprocess.Popen('pdfid.py -d ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.popupDialog('Disarmed PDF saved as ' + os.path.splitext(self.pdf_path)[0] + '.disarmed.pdf', self.pdf_path + ' Disarmed')


    # Runs stringdump.py displaying extracted strings
    def viewStrings(self, e):
        pr = subprocess.Popen('stringdump.py ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Extracted Strings')

    # Ask user for obj number to view    
    def objDialog(self, event):
        dlg = wx.TextEntryDialog(self, 'Enter the number of the object, returns filtered object')
        if dlg.ShowModal() == wx.ID_OK:
            print self.viewObject(dlg.GetValue())
            dlg.Destroy()


    # View object (extracts onject and displays it in a dialog)
    def viewRef(self, obj_num):
        pr = subprocess.Popen('pdf-parser.py -f --raw -r ' + obj_num + ' ' + self.pdf_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        lst_results = []
        for line in pr.stdout.readlines():
            lst_results.append(line)
        self.popupDialog(''.join(lst_results), 'Objects Referencing Object ' + obj_num)

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("PDFScope2 v0.1    frank.bruzzaniti@gmail.com"))
        self.SetSize((1200, 600))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        sizer_2.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_2)
        sizer_5.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_5)
        self.window_1.SplitVertically(self.panel_1, self.window_1_pane_2, 265)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        sizer_1.Add(self.gauge_1, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
